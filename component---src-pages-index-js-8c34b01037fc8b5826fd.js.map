{"version":3,"sources":["webpack:///./src/components/date.js","webpack:///./src/components/contact.js","webpack:///./src/components/list-portfolio.js","webpack:///./src/components/list-blog.js","webpack:///./src/pages/index.js","webpack:///./node_modules/gatsby/node_modules/@babel/runtime/helpers/esm/createClass.js","webpack:///./src/components/sectiontitle.js","webpack:///./src/components/items-blog.js","webpack:///./src/components/items-portfolio.js"],"names":["data","d","Date","date","getDate","month","getMonth","year","getFullYear","Contact","props","state","submitDisabled","textAreaInput","bind","handleSubmit","showContactForm","contact","api_url","event","target","style","height","scrollHeight","preventDefault","this","setState","body","encodeURI","dataName","value","dataEmail","dataMessage","fetch","method","then","res","json","result","resMessage","opacity","response","innerHTML","classList","add","remove","_this","setTimeout","error","componentDidMount","color","window","getComputedStyle","btn","getPropertyValue","querySelector","setAttribute","contactArea","querySelectorAll","forEach","e","i","p","render","id","className","title","ref","c","type","name","required","overflowY","onChange","onClick","display","description","mail","href","phone","address","whiteSpace","React","Component","query","site","siteMetadata","useStaticQuery","allMarkdownRemark","edges","length","Fragment","IndexPage","winHeight","createSVGElement","n","v","document","createElementNS","setAttributeNS","componentWillUnmount","removeEventListener","setWindowHeight","addEventListener","sWidth","svg","clientWidth","tText","tWidth","getBoundingClientRect","width","tInnerText","split","tSpan","dy","x","appendChild","margin","fontSize","parseInt","innerHeight","placeholder","lang","viewBox","preserveAspectRatio","capitalizeTitleOnHome","toUpperCase","patternUnits","y","xlinkHref","fill","textAnchor","introTag","_defineProperties","descriptor","enumerable","configurable","writable","Object","defineProperty","key","SectionTitle","colorPrimary","colorSecondary","_id","counter","Constructor","protoProps","staticProps","cp","cs","x1","x2","y1","y2","gradientUnits","stopColor","offset","_counter","prototype","BlogItem","textSecondary","fluid","node","frontmatter","image","childImageSharp","to","fields","slug","aria-label","items","push","PortfolioItem"],"mappings":"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","file":"component---src-pages-index-js-8c34b01037fc8b5826fd.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function({ data }) {\r\n    let d = new Date(data),\r\n        months = [\r\n            \"January\",\r\n            \"February\",\r\n            \"March\",\r\n            \"April\",\r\n            \"May\",\r\n            \"June\",\r\n            \"July\",\r\n            \"August\",\r\n            \"September\",\r\n            \"October\",\r\n            \"November\",\r\n            \"December\"\r\n        ],\r\n        date = d.getDate(),\r\n        month = d.getMonth(),\r\n        year = d.getFullYear();\r\n    return (\r\n        <span>\r\n            {date} {months[month]} {year}\r\n        </span>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport SectionTitle from \"./sectiontitle\";\r\nimport { StaticQuery, graphql } from \"gatsby\";\r\nimport { PaperPlane, Mapmarker, Mobile, Envelope, Loading } from \"./icons\";\r\nimport SocialLinks from \"./sociallinks\";\r\nimport \"../style/contact.less\";\r\n\r\nclass Contact extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            submitDisabled: false\r\n        };\r\n\r\n        this.textAreaInput = this.textAreaInput.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n\r\n        this.showContactForm = true;\r\n\r\n        if (this.props.contact.api_url === \"\") {\r\n            this.showContactForm = false;\r\n        }\r\n    }\r\n\r\n    textAreaInput(event) {\r\n        event.target.style.height = \"auto\";\r\n        event.target.style.height = event.target.scrollHeight + \"px\";\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        if (!this.state.submitDisabled) {\r\n            this.setState({\r\n                submitDisabled: true\r\n            });\r\n\r\n            let name = encodeURI(this.dataName.value),\r\n                email = encodeURI(this.dataEmail.value),\r\n                message = encodeURI(this.dataMessage.value),\r\n                body = `name=${name}&email=${email}&message=${message}`;\r\n\r\n            fetch(this.props.contact.api_url, {\r\n                method: \"post\",\r\n                body: body\r\n            })\r\n                .then(function(res) {\r\n                    return res.json();\r\n                })\r\n                .then(\r\n                    result => {\r\n                        this.setState({\r\n                            submitDisabled: false\r\n                        });\r\n                        this.resMessage.style.opacity = 1;\r\n                        if (result.response === \"error\") {\r\n                            this.resMessage.innerHTML =\r\n                                \"There was an error in sending the message\";\r\n                            this.resMessage.classList.add(\"color-error\");\r\n                        } else {\r\n                            this.resMessage.innerHTML =\r\n                                \"Message sent succesfully\";\r\n                            this.resMessage.classList.remove(\"color-error\");\r\n                        }\r\n                        this.dataName.value = \"\";\r\n                        this.dataEmail.value = \"\";\r\n                        this.dataMessage.value = \"\";\r\n                        let _this = this;\r\n                        setTimeout(function() {\r\n                            _this.resMessage.style.opacity = 0;\r\n                        }, 5000);\r\n                    },\r\n                    error => {\r\n                        this.resMessage.innerHTML = \"Message sent succesfully\";\r\n                        this.resMessage.classList.remove(\"color-error\");\r\n                        this.setState({\r\n                            submitDisabled: false\r\n                        });\r\n                        let _this = this;\r\n                        setTimeout(function() {\r\n                            _this.resMessage.style.opacity = 0;\r\n                        }, 5000);\r\n                    }\r\n                );\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.showContactForm) {\r\n            let color = window\r\n                .getComputedStyle(this.btn, null)\r\n                .getPropertyValue(\"color\");\r\n            this.btn.querySelector(\"path\").setAttribute(\"fill\", color);\r\n        }\r\n\r\n        let li = this.contactArea.querySelectorAll(\".item\");\r\n\r\n        li.forEach(function(e, i) {\r\n            let p = e.querySelector(\"path\");\r\n            if (p)\r\n                p.setAttribute(\r\n                    \"fill\",\r\n                    window.getComputedStyle(e, null).getPropertyValue(\"color\")\r\n                );\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <section id=\"contact\" className=\"container\">\r\n                <div className=\"section-title\">\r\n                    <SectionTitle title=\"CONTACT\" />\r\n                </div>\r\n                <div\r\n                    className={\"row\" + (this.showContactForm ? \"\" : \" no-form\")}\r\n                    ref={c => (this.contactArea = c)}\r\n                >\r\n                    {this.showContactForm && (\r\n                        <div className=\"col s12 m6\">\r\n                            <form>\r\n                                <div className=\"field\">\r\n                                    <label>\r\n                                        <span className=\"label text-tertiary\">\r\n                                            Name\r\n                                        </span>\r\n                                        <div className=\"input-border\">\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                ref={c => (this.dataName = c)}\r\n                                                className=\"field-box\"\r\n                                                name=\"name\"\r\n                                                id=\"name\"\r\n                                                required\r\n                                            />\r\n                                        </div>\r\n                                    </label>\r\n                                </div>\r\n                                <div className=\"field\">\r\n                                    <label>\r\n                                        <span className=\"label text-tertiary\">\r\n                                            Email\r\n                                        </span>\r\n                                        <div className=\"input-border\">\r\n                                            <input\r\n                                                type=\"email\"\r\n                                                ref={c => (this.dataEmail = c)}\r\n                                                className=\"field-box\"\r\n                                                name=\"email\"\r\n                                                id=\"email\"\r\n                                                required\r\n                                            />\r\n                                        </div>\r\n                                    </label>\r\n                                </div>\r\n                                <div className=\"field\">\r\n                                    <label>\r\n                                        <span className=\"label text-tertiary\">\r\n                                            Message\r\n                                        </span>\r\n                                        <div className=\"input-border\">\r\n                                            <textarea\r\n                                                style={{ overflowY: \"hidden\" }}\r\n                                                ref={c =>\r\n                                                    (this.dataMessage = c)\r\n                                                }\r\n                                                className=\"field-box\"\r\n                                                onChange={this.textAreaInput}\r\n                                                name=\"message\"\r\n                                                id=\"message\"\r\n                                                required\r\n                                            />\r\n                                        </div>\r\n                                    </label>\r\n                                </div>\r\n                                <div className=\"field\">\r\n                                    <label className=\"ib\">\r\n                                        <button\r\n                                            className={\r\n                                                \"btn\" +\r\n                                                (this.state.submitDisabled\r\n                                                    ? \" disabled\"\r\n                                                    : \"\")\r\n                                            }\r\n                                            onClick={this.handleSubmit}\r\n                                            id=\"submit\"\r\n                                            ref={c => (this.btn = c)}\r\n                                        >\r\n                                            SEND{\" \"}\r\n                                            <span\r\n                                                className=\"icon paper-plane\"\r\n                                                style={{\r\n                                                    display: this.state\r\n                                                        .submitDisabled\r\n                                                        ? \"none\"\r\n                                                        : \"inline-block\"\r\n                                                }}\r\n                                            >\r\n                                                <PaperPlane />\r\n                                            </span>\r\n                                            <span\r\n                                                className=\"icon loading\"\r\n                                                style={{\r\n                                                    display: !this.state\r\n                                                        .submitDisabled\r\n                                                        ? \"none\"\r\n                                                        : \"inline-block\"\r\n                                                }}\r\n                                            >\r\n                                                <Loading />\r\n                                            </span>\r\n                                        </button>\r\n                                    </label>\r\n                                    <label>\r\n                                        <p\r\n                                            className=\"res-message\"\r\n                                            ref={c => (this.resMessage = c)}\r\n                                        ></p>\r\n                                    </label>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    )}\r\n                    <div\r\n                        className={\r\n                            this.showContactForm\r\n                                ? \"col s12 m6 details\"\r\n                                : \"col s12 details\"\r\n                        }\r\n                    >\r\n                        {this.props.contact.description && (\r\n                            <p className=\"text-tertiary\">\r\n                                {this.props.contact.description}\r\n                            </p>\r\n                        )}\r\n                        <ul>\r\n                            {this.props.contact.mail && (\r\n                                <li className=\"text-secondary item\">\r\n                                    <span className=\"icon\">\r\n                                        <Envelope />\r\n                                    </span>\r\n                                    <a\r\n                                        href={\r\n                                            \"mailto:\" + this.props.contact.mail\r\n                                        }\r\n                                    >\r\n                                        {this.props.contact.mail}\r\n                                    </a>\r\n                                </li>\r\n                            )}\r\n                            {this.props.contact.phone && (\r\n                                <li className=\"text-secondary item\">\r\n                                    <span className=\"icon\">\r\n                                        <Mobile />\r\n                                    </span>\r\n                                    <a href={\"tel:\" + this.props.contact.phone}>\r\n                                        {this.props.contact.phone}\r\n                                    </a>\r\n                                </li>\r\n                            )}\r\n                            {this.props.contact.address && (\r\n                                <li\r\n                                    className=\"text-tertiary item\"\r\n                                    style={{ whiteSpace: \"pre\" }}\r\n                                >\r\n                                    <span className=\"icon\">\r\n                                        <Mapmarker />\r\n                                    </span>\r\n                                    {this.props.contact.address}\r\n                                </li>\r\n                            )}\r\n                            <li>\r\n                                <SocialLinks />\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nexport default () => (\r\n    <StaticQuery\r\n        query={graphql`\r\n            query {\r\n                site {\r\n                    siteMetadata {\r\n                        contact {\r\n                            api_url\r\n                            description\r\n                            mail\r\n                            phone\r\n                            address\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        `}\r\n        render={data => <Contact contact={data.site.siteMetadata.contact} />}\r\n    />\r\n);\r\n","import React from \"react\";\r\nimport { useStaticQuery, graphql } from \"gatsby\";\r\nimport PortfolioItems from \"./items-portfolio\";\r\n\r\nexport default function() {\r\n    const query = useStaticQuery(graphql`\r\n        query portfolioList {\r\n            allMarkdownRemark(\r\n                filter: { fileAbsolutePath: { regex: \"/portfolio/\" } }\r\n                limit: 6\r\n                sort: { fields: [frontmatter___date], order: DESC }\r\n            ) {\r\n                edges {\r\n                    node {\r\n                        id\r\n                        frontmatter {\r\n                            title\r\n                            description\r\n                            image {\r\n                                publicURL\r\n                                childImageSharp {\r\n                                    fluid(maxWidth: 1920) {\r\n                                        srcSet\r\n                                        ...GatsbyImageSharpFluid\r\n                                    }\r\n                                    id\r\n                                }\r\n                            }\r\n                        }\r\n                        fields {\r\n                            slug\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    `);\r\n\r\n    return (\r\n        <section id=\"portfolio\" className=\"container\">\r\n            <PortfolioItems data={query} />\r\n        </section>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { useStaticQuery, graphql } from \"gatsby\";\r\nimport BlogItems from \"./items-blog\";\r\nimport SectionTitle from \"./sectiontitle\";\r\n\r\nexport default function() {\r\n    const query = useStaticQuery(graphql`\r\n        query blogList {\r\n            allMarkdownRemark(\r\n                filter: { fileAbsolutePath: { regex: \"/blog/\" } }\r\n                limit: 6\r\n                sort: { fields: [frontmatter___date], order: DESC }\r\n            ) {\r\n                edges {\r\n                    node {\r\n                        id\r\n                        frontmatter {\r\n                            title\r\n                            description\r\n                            date\r\n                            image {\r\n                                publicURL\r\n                                childImageSharp {\r\n                                    fluid(maxWidth: 1920) {\r\n                                        srcSet\r\n                                        ...GatsbyImageSharpFluid\r\n                                    }\r\n                                    id\r\n                                }\r\n                            }\r\n                        }\r\n                        fields {\r\n                            slug\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    `);\r\n\r\n    if (query.allMarkdownRemark.edges.length > 0) {\r\n        return (\r\n            <section id=\"blog\" className=\"container\">\r\n                <div className=\"section-title\">\r\n                    <SectionTitle title=\"BLOG\" />\r\n                </div>\r\n                <BlogItems data={query} />\r\n            </section>\r\n        );\r\n    } else {\r\n        return <React.Fragment></React.Fragment>;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport Layout from \"../components/layout\";\r\nimport { graphql } from \"gatsby\";\r\nimport SEO from \"../components/seo\";\r\nimport SocialLinks from \"../components/sociallinks\";\r\nimport PortfolioList from \"../components/list-portfolio\";\r\nimport BlogList from \"../components/list-blog\";\r\nimport Contact from \"../components/contact\";\r\nimport \"../style/wall.less\";\r\n\r\nclass IndexPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            winHeight: \"100vh\"\r\n        };\r\n    }\r\n\r\n    createSVGElement(n, v) {\r\n        n = document.createElementNS(\"http://www.w3.org/2000/svg\", n);\r\n        for (var p in v) n.setAttributeNS(null, p, v[p]);\r\n        return n;\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this.setWindowHeight);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setWindowHeight();\r\n\r\n        window.addEventListener(\"resize\", this.setWindowHeight);\r\n\r\n        let sWidth = this.svg.clientWidth,\r\n            tText = this.svg.querySelector(\"text\"),\r\n            tWidth = tText.getBoundingClientRect().width;\r\n\r\n        if (tWidth > sWidth) {\r\n            let tInnerText = tText.innerHTML;\r\n            if (tInnerText.split(\" \").length > 1) {\r\n                tText.innerHTML = \"\";\r\n                tInnerText.split(\" \").forEach((e, i) => {\r\n                    let tSpan = this.createSVGElement(\"tspan\", {\r\n                        dy: i === 0 ? \"0em\" : \".8em\",\r\n                        x: \"50\"\r\n                    });\r\n                    tSpan.innerHTML = e;\r\n                    tText.appendChild(tSpan);\r\n                });\r\n                setTimeout(() => {\r\n                    this.svg.style.height =\r\n                        tText.getBoundingClientRect().height + 70;\r\n                    this.svg.style.margin = \"15px auto\";\r\n                }, 250);\r\n            } else {\r\n                while (tWidth > sWidth) {\r\n                    let fontSize = parseInt(\r\n                        window\r\n                            .getComputedStyle(tText, null)\r\n                            .getPropertyValue(\"font-size\")\r\n                    );\r\n                    tText.style.fontSize = fontSize - 1 + \"px\";\r\n                    tWidth = tText.getBoundingClientRect().width;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    setWindowHeight() {\r\n        this.setState({\r\n            winHeight: window.innerHeight\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Layout placeholder={false}>\r\n                <SEO\r\n                    lang=\"en\"\r\n                    title={this.props.data.site.siteMetadata.title}\r\n                />\r\n                <div\r\n                    className=\"wall\"\r\n                    style={{ height: this.state.winHeight + \"px\" }}\r\n                >\r\n                    <div className=\"intro container\">\r\n                        <div className=\"main-title text-primary\">\r\n                            <svg\r\n                                width=\"90%\"\r\n                                height=\"220px\"\r\n                                viewBox=\"0 0 100 100\"\r\n                                preserveAspectRatio=\"xMidYMid slice\"\r\n                                ref={c => (this.svg = c)}\r\n                            >\r\n                                {this.props.data.site.siteMetadata\r\n                                    .capitalizeTitleOnHome\r\n                                    ? this.props.data.site.siteMetadata.title.toUpperCase()\r\n                                    : this.props.data.site.siteMetadata.title}\r\n                                <pattern\r\n                                    id=\"wallPattern\"\r\n                                    patternUnits=\"userSpaceOnUse\"\r\n                                    width=\"100\"\r\n                                    height=\"100\"\r\n                                >\r\n                                    <rect\r\n                                        x=\"0\"\r\n                                        y=\"0\"\r\n                                        className=\"fill-primary\"\r\n                                        width=\"100\"\r\n                                        height=\"100\"\r\n                                    />\r\n                                    <image\r\n                                        xlinkHref=\"/images/wall.jpg\"\r\n                                        height=\"100\"\r\n                                        width=\"100\"\r\n                                        y=\"0\"\r\n                                        preserveAspectRatio=\"none\"\r\n                                    ></image>\r\n                                </pattern>\r\n                                <text\r\n                                    fill=\"url(#wallPattern)\"\r\n                                    textAnchor=\"middle\"\r\n                                    x=\"50\"\r\n                                    y=\"50\"\r\n                                >\r\n                                    {this.props.data.site.siteMetadata\r\n                                        .capitalizeTitleOnHome\r\n                                        ? this.props.data.site.siteMetadata.title.toUpperCase()\r\n                                        : this.props.data.site.siteMetadata\r\n                                              .title}\r\n                                </text>\r\n                            </svg>\r\n                        </div>\r\n                        <p className=\"tag-line text-secondary\">\r\n                            {this.props.data.site.siteMetadata.introTag}\r\n                        </p>\r\n                        <p className=\"caption text-tertiary\">\r\n                            {this.props.data.site.siteMetadata.description}\r\n                        </p>\r\n                        <a href=\"#portfolio\" className=\"btn\">\r\n                            SEE WORKS\r\n                        </a>\r\n                    </div>\r\n                    <div className=\"social-buttons\">\r\n                        <SocialLinks />\r\n                    </div>\r\n                </div>\r\n                <PortfolioList />\r\n                <BlogList />\r\n                <Contact />\r\n            </Layout>\r\n        );\r\n    }\r\n}\r\n\r\nexport default IndexPage;\r\n\r\nexport const query = graphql`\r\n    query {\r\n        site {\r\n            siteMetadata {\r\n                title\r\n                capitalizeTitleOnHome\r\n                titleImage\r\n                introTag\r\n                description\r\n                social {\r\n                    name\r\n                    url\r\n                    icon\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","import React from \"react\";\r\n\r\nclass SectionTitle extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            colorPrimary: \"#00\",\r\n            colorSecondary: \"#00\"\r\n        };\r\n\r\n        this._id = SectionTitle.counter;\r\n    }\r\n\r\n    static get counter() {\r\n        SectionTitle._counter = (SectionTitle._counter || 0) + 1;\r\n        return SectionTitle._counter;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            colorPrimary: window\r\n                .getComputedStyle(this.cp, null)\r\n                .getPropertyValue(\"color\"),\r\n            colorSecondary: window\r\n                .getComputedStyle(this.cs, null)\r\n                .getPropertyValue(\"color\")\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <span ref={c => (this.cp = c)} className=\"color-primary\"></span>\r\n                <span\r\n                    ref={c => (this.cs = c)}\r\n                    className=\"color-secondary\"\r\n                ></span>\r\n                <svg\r\n                    width=\"100%\"\r\n                    height=\"150\"\r\n                    viewBox=\"0 0 100 100\"\r\n                    preserveAspectRatio=\"xMidYMid slice\"\r\n                >\r\n                    <linearGradient\r\n                        id={\"primaryGradient\" + this._id}\r\n                        x1=\"0\"\r\n                        x2=\"100%\"\r\n                        y1=\"0\"\r\n                        y2=\"0\"\r\n                        gradientUnits=\"userSpaceOnUse\"\r\n                    >\r\n                        <stop stopColor={this.state.colorPrimary} offset=\"0%\" />\r\n                        <stop\r\n                            stopColor={this.state.colorSecondary}\r\n                            offset=\"100%\"\r\n                        />\r\n                    </linearGradient>\r\n                    <text\r\n                        textAnchor=\"middle\"\r\n                        x=\"50\"\r\n                        y=\"52\"\r\n                        fill={\"url(#primaryGradient\" + this._id + \")\"}\r\n                    >\r\n                        {this.props.title}\r\n                    </text>\r\n                </svg>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SectionTitle;\r\n","import React from \"react\";\r\nimport { Link } from \"gatsby\";\r\nimport Img from \"gatsby-image\";\r\nimport Date from \"./date\";\r\nimport { Calendar } from \"./icons\";\r\nimport \"../style/list-blog.less\";\r\n\r\nclass BlogItem extends React.Component {\r\n    componentDidMount() {\r\n        this.color = window\r\n            .getComputedStyle(this.textSecondary, null)\r\n            .getPropertyValue(\"color\");\r\n        const calendar = this.textSecondary.querySelector(\"path\");\r\n        calendar.setAttribute(\"fill\", this.color);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"item col s12 m6\">\r\n                <div className=\"box\">\r\n                    <div className=\"image\">\r\n                        <Img\r\n                            fluid={\r\n                                this.props.data.node.frontmatter.image\r\n                                    .childImageSharp.fluid\r\n                            }\r\n                        />\r\n                        <Link\r\n                            to={this.props.data.node.fields.slug}\r\n                            title={this.props.data.node.frontmatter.title}\r\n                            aria-label={this.props.data.node.frontmatter.title}\r\n                            className=\"overlay-link\"\r\n                            style={{ opacity: 0 }}\r\n                        >\r\n                            {this.props.data.node.frontmatter.title}\r\n                        </Link>\r\n                    </div>\r\n                    <div className=\"content\">\r\n                        <h3 className=\"text-primary\">\r\n                            <Link\r\n                                to={this.props.data.node.fields.slug}\r\n                                title={this.props.data.node.frontmatter.title}\r\n                            >\r\n                                {this.props.data.node.frontmatter.title}\r\n                            </Link>\r\n                        </h3>\r\n                        <p className=\"text-tertiary\">\r\n                            {this.props.data.node.frontmatter.description}\r\n                        </p>\r\n                        <p\r\n                            className=\"date text-secondary\"\r\n                            ref={c => (this.textSecondary = c)}\r\n                        >\r\n                            <span className=\"icon\">\r\n                                <Calendar />\r\n                            </span>\r\n                            <Date\r\n                                data={this.props.data.node.frontmatter.date}\r\n                            />\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default function(props) {\r\n    const data = props.data.allMarkdownRemark.edges;\r\n    let items = [];\r\n    data.forEach(function(e, i) {\r\n        if (props.remove && e.node.id === props.remove) return;\r\n        items.push(<BlogItem key={e.node.id} data={e} />);\r\n    });\r\n    return <div className=\"row\">{items}</div>;\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"gatsby\";\r\nimport Img from \"gatsby-image\";\r\nimport \"../style/list-portfolio.less\";\r\n\r\nclass PortfolioItem extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"item col s12\">\r\n                <div className=\"row flex\">\r\n                    <div className=\"col m6 image\">\r\n                        <Img\r\n                            fluid={\r\n                                this.props.data.node.frontmatter.image\r\n                                    .childImageSharp.fluid\r\n                            }\r\n                        />\r\n                        <Link\r\n                            to={this.props.data.node.fields.slug}\r\n                            title={this.props.data.node.frontmatter.title}\r\n                            aria-label={this.props.data.node.frontmatter.title}\r\n                            className=\"overlay-link\"\r\n                            style={{ opacity: 0 }}\r\n                        >\r\n                            {this.props.data.node.frontmatter.title}\r\n                        </Link>\r\n                    </div>\r\n                    <div className=\"col m6 content\">\r\n                        <h2 className=\"text-primary pseudo-divider\">\r\n                            <Link\r\n                                to={this.props.data.node.fields.slug}\r\n                                title={this.props.data.node.frontmatter.title}\r\n                                aria-label={\r\n                                    this.props.data.node.frontmatter.title\r\n                                }\r\n                            >\r\n                                {this.props.data.node.frontmatter.title}\r\n                            </Link>\r\n                        </h2>\r\n                        <p className=\"text-tertiary\">\r\n                            {this.props.data.node.frontmatter.description}\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default function(props) {\r\n    const data = props.data.allMarkdownRemark.edges;\r\n    let items = [];\r\n    data.forEach(function(e, i) {\r\n        items.push(<PortfolioItem key={e.node.id} data={e} />);\r\n    });\r\n    return <div className=\"row\">{items}</div>;\r\n}\r\n"],"sourceRoot":""}