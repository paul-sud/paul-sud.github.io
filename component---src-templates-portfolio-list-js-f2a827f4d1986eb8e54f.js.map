{"version":3,"sources":["webpack:///./src/components/pagination.js","webpack:///./src/templates/portfolio-list.js","webpack:///./src/components/sectiontitle.js","webpack:///./src/components/items-portfolio.js"],"names":["pageContext","type","numPages","listItems","i","push","className","currentPage","key","to","title","charAt","toUpperCase","slice","Fragment","PortfolioList","render","query","this","props","datas","allMarkdownRemark","edges","length","id","data","React","Component","lang","SectionTitle","state","colorPrimary","colorSecondary","_id","counter","componentDidMount","setState","window","getComputedStyle","cp","getPropertyValue","cs","ref","c","width","height","viewBox","preserveAspectRatio","x1","x2","y1","y2","gradientUnits","stopColor","offset","textAnchor","x","y","fill","_counter","PortfolioItem","fluid","node","frontmatter","image","childImageSharp","fields","slug","aria-label","style","opacity","description","items","forEach","e"],"mappings":"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","file":"component---src-templates-portfolio-list-js-f2a827f4d1986eb8e54f.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"gatsby\";\r\nimport { ChevronLeft, ChevronRight } from \"./icons\";\r\nimport \"../style/pagination.less\";\r\n\r\nexport default function({ pageContext, type }) {\r\n    if (pageContext.numPages > 1) {\r\n        let listItems = [];\r\n        for (let i = 1; i <= pageContext.numPages; i++) {\r\n            listItems.push(\r\n                <li\r\n                    className={i === pageContext.currentPage ? \"active\" : \"\"}\r\n                    key={\"PaginationItem\" + i}\r\n                >\r\n                    <Link\r\n                        to={\"/\" + type + \"/\" + (i === 1 ? \"\" : i)}\r\n                        title={\r\n                            type.charAt(0).toUpperCase() +\r\n                            type.slice(1) +\r\n                            \" - Page \" +\r\n                            i\r\n                        }\r\n                        key={\"PaginationItemA\" + i}\r\n                    >\r\n                        {i}\r\n                    </Link>\r\n                </li>\r\n            );\r\n        }\r\n        return (\r\n            <div className=\"pagination\">\r\n                <ul>\r\n                    {pageContext.currentPage !== 1 && (\r\n                        <li>\r\n                            <Link\r\n                                to={\r\n                                    \"/\" +\r\n                                    type +\r\n                                    \"/\" +\r\n                                    (pageContext.currentPage - 1 === 1\r\n                                        ? \"\"\r\n                                        : pageContext.currentPage - 1)\r\n                                }\r\n                                title=\"Previous Page\"\r\n                            >\r\n                                <span className=\"icon\">\r\n                                    <ChevronLeft />\r\n                                </span>\r\n                            </Link>\r\n                        </li>\r\n                    )}\r\n                    {listItems}\r\n                    {pageContext.currentPage !== pageContext.numPages && (\r\n                        <li>\r\n                            <Link\r\n                                to={\r\n                                    \"/\" +\r\n                                    type +\r\n                                    \"/\" +\r\n                                    (pageContext.currentPage + 1)\r\n                                }\r\n                                title=\"Next Page\"\r\n                            >\r\n                                <span className=\"icon\">\r\n                                    <ChevronRight />\r\n                                </span>\r\n                            </Link>\r\n                        </li>\r\n                    )}\r\n                </ul>\r\n            </div>\r\n        );\r\n    } else {\r\n        return <React.Fragment></React.Fragment>;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { graphql } from \"gatsby\";\r\nimport Layout from \"../components/layout\";\r\nimport PortfolioItems from \"../components/items-portfolio\";\r\nimport SectionTitle from \"../components/sectiontitle\";\r\nimport Pagination from \"../components/pagination\";\r\nimport SEO from \"../components/seo\";\r\n\r\nclass PortfolioList extends React.Component {\r\n    render() {\r\n        const query = this.props.datas;\r\n        if (query.allMarkdownRemark.edges.length > 0) {\r\n            return (\r\n                <section id=\"portfolio\" className=\"container\">\r\n                    <div className=\"section-title\">\r\n                        <SectionTitle title=\"PORTFOLIO\" />\r\n                    </div>\r\n                    <PortfolioItems data={query} />\r\n                    <Pagination\r\n                        pageContext={this.props.pageContext}\r\n                        type=\"portfolio\"\r\n                    />\r\n                </section>\r\n            );\r\n        } else {\r\n            return <React.Fragment></React.Fragment>;\r\n        }\r\n    }\r\n}\r\n\r\nexport default function({ data, pageContext }) {\r\n    return (\r\n        <Layout>\r\n            <SEO lang=\"en\" title=\"Portfolio\" />\r\n            <PortfolioList datas={data} pageContext={pageContext} />\r\n        </Layout>\r\n    );\r\n}\r\n\r\nexport const query = graphql`\r\n    query portfolioListPage($skip: Int!, $limit: Int!) {\r\n        allMarkdownRemark(\r\n            filter: { fileAbsolutePath: { regex: \"/portfolio/\" } }\r\n            sort: { fields: [frontmatter___date], order: DESC }\r\n            limit: $limit\r\n            skip: $skip\r\n        ) {\r\n            edges {\r\n                node {\r\n                    id\r\n                    frontmatter {\r\n                        title\r\n                        description\r\n                        date\r\n                        image {\r\n                            publicURL\r\n                            childImageSharp {\r\n                                fluid(maxWidth: 1920) {\r\n                                    srcSet\r\n                                    ...GatsbyImageSharpFluid\r\n                                }\r\n                                id\r\n                            }\r\n                        }\r\n                    }\r\n                    fields {\r\n                        slug\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n","import React from \"react\";\r\n\r\nclass SectionTitle extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            colorPrimary: \"#00\",\r\n            colorSecondary: \"#00\"\r\n        };\r\n\r\n        this._id = SectionTitle.counter;\r\n    }\r\n\r\n    static get counter() {\r\n        SectionTitle._counter = (SectionTitle._counter || 0) + 1;\r\n        return SectionTitle._counter;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            colorPrimary: window\r\n                .getComputedStyle(this.cp, null)\r\n                .getPropertyValue(\"color\"),\r\n            colorSecondary: window\r\n                .getComputedStyle(this.cs, null)\r\n                .getPropertyValue(\"color\")\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <span ref={c => (this.cp = c)} className=\"color-primary\"></span>\r\n                <span\r\n                    ref={c => (this.cs = c)}\r\n                    className=\"color-secondary\"\r\n                ></span>\r\n                <svg\r\n                    width=\"100%\"\r\n                    height=\"150\"\r\n                    viewBox=\"0 0 100 100\"\r\n                    preserveAspectRatio=\"xMidYMid slice\"\r\n                >\r\n                    <linearGradient\r\n                        id={\"primaryGradient\" + this._id}\r\n                        x1=\"0\"\r\n                        x2=\"100%\"\r\n                        y1=\"0\"\r\n                        y2=\"0\"\r\n                        gradientUnits=\"userSpaceOnUse\"\r\n                    >\r\n                        <stop stopColor={this.state.colorPrimary} offset=\"0%\" />\r\n                        <stop\r\n                            stopColor={this.state.colorSecondary}\r\n                            offset=\"100%\"\r\n                        />\r\n                    </linearGradient>\r\n                    <text\r\n                        textAnchor=\"middle\"\r\n                        x=\"50\"\r\n                        y=\"52\"\r\n                        fill={\"url(#primaryGradient\" + this._id + \")\"}\r\n                    >\r\n                        {this.props.title}\r\n                    </text>\r\n                </svg>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SectionTitle;\r\n","import React from \"react\";\r\nimport { Link } from \"gatsby\";\r\nimport Img from \"gatsby-image\";\r\nimport \"../style/list-portfolio.less\";\r\n\r\nclass PortfolioItem extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"item col s12\">\r\n                <div className=\"row flex\">\r\n                    <div className=\"col m6 image\">\r\n                        <Img\r\n                            fluid={\r\n                                this.props.data.node.frontmatter.image\r\n                                    .childImageSharp.fluid\r\n                            }\r\n                        />\r\n                        <Link\r\n                            to={this.props.data.node.fields.slug}\r\n                            title={this.props.data.node.frontmatter.title}\r\n                            aria-label={this.props.data.node.frontmatter.title}\r\n                            className=\"overlay-link\"\r\n                            style={{ opacity: 0 }}\r\n                        >\r\n                            {this.props.data.node.frontmatter.title}\r\n                        </Link>\r\n                    </div>\r\n                    <div className=\"col m6 content\">\r\n                        <h2 className=\"text-primary pseudo-divider\">\r\n                            <Link\r\n                                to={this.props.data.node.fields.slug}\r\n                                title={this.props.data.node.frontmatter.title}\r\n                                aria-label={\r\n                                    this.props.data.node.frontmatter.title\r\n                                }\r\n                            >\r\n                                {this.props.data.node.frontmatter.title}\r\n                            </Link>\r\n                        </h2>\r\n                        <p className=\"text-tertiary\">\r\n                            {this.props.data.node.frontmatter.description}\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default function(props) {\r\n    const data = props.data.allMarkdownRemark.edges;\r\n    let items = [];\r\n    data.forEach(function(e, i) {\r\n        items.push(<PortfolioItem key={e.node.id} data={e} />);\r\n    });\r\n    return <div className=\"row\">{items}</div>;\r\n}\r\n"],"sourceRoot":""}